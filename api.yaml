openapi: "3.0.0"
info:
  version: 1.0.0
  title: HiPPER
servers: 
  - url: '35.198.70.235:8090'
tags:
  - name: Customer Register
    description: create and manage customers signups
  - name: Customer Actions
    description: create and manage customers signups
  - name: Tours Generator
    description: Create and get new tours
  - name: Customer Messages
    description: Get the customer messsages
  - name: Provider Register
    description: create and manage providers signups
  - name: Provider
    description: manage provider data
  - name: Product
    description: create and manage Products
  - name: Provider Redeem
    description: Redeem the customer's tour
paths:
  '/register/customer/email/login':
    post:
      tags:
        - Customer Register
      summary: Login by Email
      description: ''
      operationId: login
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/login_request'
      responses:
        '200':
          description: OK
          $ref: '#/components/schemas/login_response'
        '405':
          description: Invalid input
  '/register/customer/email/check':
    post:
      tags:
        - Customer Register
      summary: Check Email Address
      operationId: emailCheck
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - token
      responses:
        '405':
          description: Invalid input
  '/register/customer/email/signup':
    post:
      tags:
        - Customer Register
      summary: Signup by Email
      operationId: emailSignup
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/login_request'
      responses:
        '200':
          description: OK
          $ref: '#/components/schemas/login_response'
        '405':
          description: Invalid input
  '/register/customer/facebook/token':
    post:
      tags:
        - Customer Register
      summary: Login or register using a facebook token
      description: 'Use scope=public_profile,email in the requset'
      operationId: loginFacebookToken
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                token:
                  type: string
              required:
              - token
      responses:
        '200':
          description: OK
          $ref: '#/components/schemas/login_response'
        '405':
          description: Invalid input
  '/register/customer/google/token':
    post:
      tags:
        - Customer Register
      summary: Login or register using a Google token
      description: 'Use scope=profile,email in the requset'
      operationId: loginGoogleToken
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                token:
                  type: string
              required:
              - token
      responses:
        '200':
          description: OK
          $ref: '#/components/schemas/login_response'
        '405':
          description: Invalid input
  '/secured/customer/{id}/buy/suggestedtour/{tour_code}':
    put:
      tags:
        - Customer Actions
      summary: Assign the tour for the customer
      description: >-
        The customer is already registered in the system, use after the buying
        confirmation
      operationId: buySuggestedTourByCustomer
      parameters:
        - name: id
          in: path
          description: the database id of the customer
          required: true
          schema:
            type: string
        - name: tour_code
          in: path
          description: The unieqe code of that tour
          required: true
          schema:
            type: string
      requestBody:
        description: Info about the purch
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/buy_tour'
      responses:
        '405':
          description: Invalid input
  '/secured/customer/{id}/tours/active':
    get:
      tags:
        - Customer Actions
      summary: Get tour info the active tour
      description: get
      operationId: getActiveTour
      parameters:
        - name: id
          in: path
          description: the database id of the customer
          required: true
          schema:
            type: string
      responses:
        '401':
          $ref: '#/components/responses/Unauthorized'   # <-----
        '404':
          $ref: '#/components/responses/NotFound'       # <-----
  
  '/secured/customer/{id}/redeem':
    post:
      tags:
        - Customer Actions
      summary: Use the tour code to redeem the tour
      description: Set the customer tour as used for that provider
      operationId: redeemTourCustomer
      parameters:
        - name: id
          in: path
          description: The id of the provider
          required: true
          schema:
            type: string
      requestBody:
        description: Info about the purch
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/redeem_request'
      responses:
        default:
          description: successful operation
  
  '/secured/customer/{id}/profile_pic_multipart':
    post:
      tags:
        - Customer Actions
      summary: Get tour info the active tour
      description: get the customer profile picture
      parameters:
        - name: id
          in: path
          description: the database id of the customer
          required: true
          schema:
            type: string
      responses:
        '401':
          $ref: '#/components/responses/Unauthorized'   # <-----
        '404':
          $ref: '#/components/responses/NotFound'       # <-----
  
  '/secured/customer/{id}/profile_pic':
    get:
      tags:
        - Customer Actions
      summary: Get tour info the active tour
      description: update the customer profile picture
      parameters:
        - name: id
          in: path
          description: the database id of the customer
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ByteImage'   # <-----
        '401':
          $ref: '#/components/responses/Unauthorized'   # <-----
        '404':
          $ref: '#/components/responses/NotFound'       # <-----
    post:
      tags:
        - Customer Actions
      summary: get the customer profile picture
      description: get the customer profile picture
      parameters:
        - name: id
          in: path
          description: the database id of the customer
          required: true
          schema:
            type: string
      requestBody:
        description: File structure with base64 property
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/file_base64'
      responses:
        '401':
          $ref: '#/components/responses/Unauthorized'   # <-----
        '404':
          $ref: '#/components/responses/NotFound'       # <-----
  
  '/secured/customer/{id}/provider/{provider_id}/picture':
    get:
      tags:
        - Customer Actions
      summary: Get tour info the active tour
      description: update the customer profile picture
      parameters:
        - name: id
          in: path
          description: the database id of the customer
          required: true
          schema:
            type: string
        - name: provider_id
          in: path
          description: the database id of the provider
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ByteImage'   # <-----
        '401':
          $ref: '#/components/responses/Unauthorized'   # <-----
        '404':
          $ref: '#/components/responses/NotFound'       # <-----
  '/secured/customer/{id}/product/{product_id}/picture':
    get:
      tags:
        - Customer Actions
      summary: Get tour info the active tour
      description: update the customer profile picture
      parameters:
        - name: id
          in: path
          description: the database id of the customer
          required: true
          schema:
            type: string
        - name: product_id
          in: path
          description: the database id of the product
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ByteImage'   # <-----
        '401':
          $ref: '#/components/responses/Unauthorized'   # <-----
        '404':
          $ref: '#/components/responses/NotFound'       # <-----
        
  '/secured/customer/{id}/messages/system/new':
    get:
      tags:
        - Customer Messages
      summary: Get customer messages by status
      description: >-
        The customer is already registered in the system, use after the buying
        confirmation
      operationId: getCustomerMessages
      parameters:
        - name: id
          in: path
          description: the database id of the customer
          required: true
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
  '/secured/customer/{id}/messages/system/acknowledge':
    put:
      tags:
        - Customer Messages
      summary: Get customer messages by status
      description: >-
        The customer is already registered in the system, use after the buying
        confirmation
      operationId: getCustomerMessages
      parameters:
        - name: id
          in: path
          description: the database id of the customer
          required: true
          schema:
            type: string
      requestBody:
        description: Info about the purch
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/redeem_request'
      responses:
        '405':
          description: Invalid input
  '/secured/customer/{id}/messages/system/answer':
    post:
      tags:
        - Customer Messages
      summary: Get customer messages by status
      description: Answer to cusromer message
      parameters:
        - name: id
          in: path
          description: the database id of the customer
          required: true
          schema:
            type: string
      requestBody:
        description: Info about the purch
        required: true
        content:
          'application/json':
            schema:
              oneOf:
                - $ref: '#/components/schemas/user_message_answer_yesno'
                - $ref: '#/components/schemas/user_message_answer_text'
              discriminator:
                propertyName: type
      responses:
        '405':
          description: Invalid input
  '/secured/customer/{id}/upload/picture':
    post:
      tags:
        - Customer Messages
      summary: Get tour info the active tour
      description: update the customer profile picture
      parameters:
        - name: id
          in: path
          description: the database id of the customer
          required: true
          schema:
            type: string
      requestBody:
        description: File structure with base64 property
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/file_base64'
      responses:
        '401':
          $ref: '#/components/responses/Unauthorized'   # <-----
        '404':
          $ref: '#/components/responses/NotFound'       # <-----
  '/secured/customer/{id}/upload/picture/{pic_name}':
    get:
      tags:
        - Customer Messages
      summary: get the customer profile picture
      description: get the customer profile picture
      parameters:
        - name: id
          in: path
          description: the database id of the customer
          required: true
          schema:
            type: string
        - name: pic_name
          in: path
          description: The name picture was stored
          required: true
          schema:
            type: string
      responses:
        '401':
          $ref: '#/components/responses/Unauthorized'   # <-----
        '404':
          $ref: '#/components/responses/NotFound'       # <-----
  
  '/tours/generator':
    post:
      tags:
        - Tours Generator
      summary: Generate tours by demand
      description: Generate tours by demand
      requestBody:
        description: Info about the provider location
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/tourRequest'
      responses:
        '200':
          description: successful operation
  
  '/tours/generator/list/{list_token}':
    get:
      tags:
        - Tours Generator
      summary: Get the generated list for the request
      description: Get the generated list for the request
      parameters:
        - name: list_token
          in: path
          description: The token recieved when generate requested
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          $ref: '#/components/schemas/suggested_tour'
  '/tours/generator/join/{active_tour_code}':
    get:
      tags:
        - Tours Generator
      summary: Get the generated list for the request
      description: Get the generated list for the request
      parameters:
        - name: active_tour_code
          in: path
          description: Tour Code from an active tour
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
  '/register/provider/signup':
    post:
      tags:
        - Provider Register
      summary: Signup new provider
      description: Create new provider in the system
      operationId: signupProvider
      requestBody:
        description: Info about the provider location
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/provider_signup'
      responses:
        '200':
          description: successful operation
  '/register/provider/login':
    post:
      tags:
        - Provider Register
      summary: Login existing provider
      description: Return authentication for the provider
      operationId: loginProvider
      requestBody:
        description: Info about the provider location
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/login_request'
      responses:
        '200':
          description: successful operation
  '/secured/provider/{providerId}':
    get:
      tags:
        - Provider
      summary: Get all provider info
      description: Add new product for the provider
      operationId: getProvider
      parameters:
        - name: providerId
          in: path
          description: The id of the provider
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
  '/secured/provider/{providerId}/address':
    post:
      tags:
        - Provider
      summary: Create new provider product
      description: Add new product for the provider
      operationId: updateProviderAddress
      parameters:
        - name: providerId
          in: path
          description: The id of the provider
          required: true
          schema:
            type: string
      requestBody:
        description: Info about the provider location
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/address'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
  '/secured/provider/{providerId}/information':
    post:
      tags:
        - Provider
      summary: Create new provider product
      description: Add new product for the provider
      operationId: updateProviderInformation
      parameters:
        - name: providerId
          in: path
          description: The id of the provider
          required: true
          schema:
            type: string
      requestBody:
        description: Information about the provider
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/providerInformation'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
  '/secured/provider/{providerId}/bank-details':
    post:
      tags:
        - Provider
      summary: Create new provider product
      description: Add new product for the provider
      operationId: updateBankDetails
      parameters:
        - name: providerId
          in: path
          description: The id of the provider
          required: true
          schema:
            type: string
      requestBody:
        description: Information about the provider
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/providerBankDetails'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
  '/secured/provider/{providerId}/active-time':
    post:
      tags:
        - Provider
      summary: Create new provider product
      description: Add new product for the provider
      parameters:
        - name: providerId
          in: path
          description: The id of the provider
          required: true
          schema:
            type: string
      requestBody:
        description: Array of all the days of the week and the time the provider active
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/providerActiveTime'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
  '/secured/provider/{providerId}/picture':
    get:
      tags:
        - Provider
      summary: Get the provider picture
      description: The picture of the provider for the provider request
      operationId: updateBankDetails
      parameters:
        - name: providerId
          in: path
          description: The id of the provider
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ByteImage'   # <-----
        '401':
          $ref: '#/components/responses/Unauthorized'   # <-----
        '404':
          $ref: '#/components/responses/NotFound'       # <-----
    post:
      tags:
        - Provider
      summary: Update or set provider picture
      description: Update or set provider picture
      operationId: updateBankDetails
      parameters:
        - name: providerId
          in: path
          description: The id of the provider
          required: true
          schema:
            type: string
      requestBody:
        description: File structure with base64 property
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/file_base64'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
  '/secured/provider/{providerId}/product':
    get:
      tags:
        - Product
      summary: Get provider products
      description: get all the products for the provider
      operationId: findAllByProviderId
      parameters:
        - name: providerId
          in: path
          description: The id of the provider
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
    post:
      tags:
        - Product
      summary: Create new provider product
      description: Add new product for the provider
      operationId: createProduct
      parameters:
        - name: providerId
          in: path
          description: The id of the provider
          required: true
          schema:
            type: string
      requestBody:
        description: Info about the provider location
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/product'
      responses:
        default:
          description: successful operation
  '/secured/provider/{providerId}/product/{product_id}':
    put:
      tags:
        - Product
      summary: Change product
      description: Change product for the provider
      operationId: updateProduct
      parameters:
        - name: providerId
          in: path
          description: The id of the provider
          required: true
          schema:
            type: string
        - name: product_id
          in: path
          description: The id of the product to delete
          required: true
          schema:
            type: string
      requestBody:
        description: Info about the provider location
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/product'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - Product
      summary: Delete provider product
      description: Delete one product for the provider
      operationId: deleteProduct
      parameters:
        - name: providerId
          in: path
          description: The id of the provider
          required: true
          schema:
            type: string
        - name: product_id
          in: path
          description: The id of the product to delete
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
  '/secured/provider/{providerId}/product/{product_id}/picture':
    get:
      tags:
        - Product
      summary: Get the product picture
      description: The picture of the provider for the provider request
      operationId: updateBankDetails
      parameters:
        - name: providerId
          in: path
          description: The id of the provider
          required: true
          schema:
            type: string
        - name: product_id
          in: path
          description: The id of the product to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ByteImage'   # <-----
        '401':
          $ref: '#/components/responses/Unauthorized'   # <-----
        '404':
          $ref: '#/components/responses/NotFound'       # <-----
    post:
      tags:
        - Product
      summary: Update or set product picture
      description: Update or set provider picture
      operationId: updateBankDetails
      parameters:
        - name: providerId
          in: path
          description: The id of the provider
          required: true
          schema:
            type: string
        - name: product_id
          in: path
          description: The id of the product to delete
          required: true
          schema:
            type: string
      requestBody:
        description: File structure with base64 property
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/file_base64'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
  '/secured/provider/{providerId}/redeem':
    post:
      tags:
        - Provider Redeem
      summary: Use the tour code to redeem the tour
      description: Set the customer tour as used for that provider
      operationId: redeemTour
      parameters:
        - name: providerId
          in: path
          description: The id of the provider
          required: true
          schema:
            type: string
      requestBody:
        description: Info about the provider redeem
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/redeem_request'
      responses:
        default:
          description: successful operation
# securityDefinitions:
#  petstore_auth:
#    type: oauth2
#    authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
#    flow: implicit
#    scopes:
#      'write:pets': modify pets in your account
#      'read:pets': read your pets
#  api_key:
#    type: apiKey
#    name: api_key
#    in: header
components:
  responses:
    ByteImage:
      description: Image
      content:
        image/png:
          schema:
            type: string
            format: binary
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    
  schemas:
    login_request:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    
    login_response:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        scope:
          type: string
        token_type:
          type: string
        expires_in:
          type: number
        customer_id:
          type: string
        provider_id:
          type: string
    
    customer:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        systemLanguage:
          type: string
          enum: [eng, esp]
        score:
          type: integer
          format: int32
        prefereces:
          $ref: '#/components/schemas/CustomerTourPreferences'
        details:
          $ref: '#/components/schemas/CustomerDetails'
    CustomerTourPreferences:
      type: object
      properties:
        walker:
          type: integer
          minimum: 1
          maximum: 5
        music:
          type: integer
          minimum: 1
          maximum: 5
        romantic:
          type: integer
          minimum: 1
          maximum: 5
        adventurer:
          type: integer
          minimum: 1
          maximum: 5
        food:
          type: string
          enum: [vigan, vegetarian, all]
        alcohol:
          type: string
          enum: [none, mild, full]
    
    CustomerDetails:
      type: object
      properties:
        id:
          type: string
        homeCountry:
          type: string
        gender:
          type: string
          enum: [m, f]
        age:
          type: integer
          format: int32
        birthDate:
          type: string
    
    tourRequest:
      type: object
      properties:
        userID:
          type: integer
          format: int64
        location:
          $ref: '#/components/schemas/location'
        requestTime:
          type: string
          format: date-time
        preferences:
          $ref: '#/components/schemas/CustomerTourPreferences'
    location:
      type: object
      properties:
        x:
          type: number
          format: dubble
        y:
          type: number
          format: dubble
    
    address:
      type: object
      properties:
        adress1:
          type: string
        address2:
          type: string
        district:
          type: string
        city:
          type: string
        country:
          type: string
        postalCode:
          type: string
        phone:
          type: string
        location:
          $ref: '#/components/schemas/location'
    
    buy_tour:
      type: object
      properties:
        confirmation_id:
          type: string
        time:
          type: string
          
    suggested_tour:
      type: object
      properties:
        id:
          type: string
        tourCode:
          type: string
        tourRequestToken:
          type: string
        name:
          type: string
        pictureURL:
          type: string
        price:
          type: number
        distance:
          type: string
        generatedTime:
          type: string
        tourTime:
          type: string
    
    provider_signup:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        providerName:
          type: string
        contactName:
          type: string
      required:
        - email
        - password
        - providerName
        - contactName

    provider:
      type: object
      properties:
        email:
          type: string
        providerName:
          type: string
        contactName:
          type: string
        address:
          $ref: '#/components/schemas/address'
        information:
          $ref: '#/components/schemas/providerInformation'
        bankDetails:
          $ref: '#/components/schemas/providerBankDetails'
        activeTime:
          $ref: '#/components/schemas/providerActiveTime'
          
    providerInformation:
      type: object
      properties:
        typesOfProductDetail:
          type: string
        placeInfo:
          type: string
    
    providerBankDetails:
      type: object
      properties:
        beneficiaryName:
          type: string
        beneficiaryAddress:
          type: string
        bankName:
          type: string
        branchNumber:
          type: string
        accountNumber:
          type: string
          
    providerActiveTime:
      type: object
      properties:
        days:
          type: array
          items:
            $ref: '#/components/schemas/providerActiveTimeDay'
    
    providerActiveTimeDay:
      type: object
      properties:
        day:
          type: string
          enum: [sunday, monday, tuesday, wednesday, thursday, friday, saturday]
        startTime:
          type: string
        endTime:
          type: string
        status:
          type: string
          enum: [open, close]
        label:
          type: string
        
    product:
      type: object
      properties:
        productName:
          type: string
        productType:
          type: string
        price:
          type: string
        description :
          type: string
      required:
        - productName
        - productType
        - price
        - description
    redeem_request:
      type: object
      properties:
        code:
          description: Active tour code of the customer
          type: string
        redeemType:
          description: set 'provider_scan', 'provider_code', 'user_manual'
          type: string
          enum:
            - provider_scan
            - provider_code
            - user_manual
        requestTime:
          description: The time the request was sent
          type: string
        userReason:
          description: only when 'user_manual'
          type: string
          enum:
            - provider_request
            - provider_closed
            - provider_not_found
            - technical_issues
            - other
      required:
        - code
        - redeemType
        - userReason
    
    # All message types
    user_message:
      type: object
      properties:
        id:
          description: message id
          type: string
        status:
          description: type of answer relate to the type of message
          type: string
        customerID:
          description: the user id of the message
          type: string
        type:
          description: the user id of the message
          type: string
          enum: [eng, esp]
        showSuspension:
          description: time to delay the message
          type: number
    
    
    # All answer types
    user_message_answer_yesno:
      type: object
      required:
        - type
        - messageID
      properties:
        messageID:
          description: message id
          type: string
        type:
          description: yesno
          type: string
        text:
          description: type of answer relate to the type of message
          type: string
    user_message_answer_text:
      type: object
      required:
        - type
        - messageID
      properties:
        messageID:
          description: message id
          type: string
        type:
          description: text
          type: string
        text:
          description: type of answer relate to the type of message
          type: string
    
    error:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    file_base64:
      type: object
      properties:
        base64:
          description: File representation in base64
          type: string
        hight:
          type: integer
          format: int64
        width:
          type: integer
          format: int64
        name:
          type: string
