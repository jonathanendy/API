openapi: "3.0.0"
info:
  version: 0.0.1
  title: CardIt
servers: 
  - url: ''
tags:
  - name: Customer Login
    description: create and manage customers signups
  - name: Customer Actions
    description: create and manage customers signups
  - name: Business Login
    description: create and manage providers signups
  - name: Business Actions
    description: manage provider data
paths:
  '/customer/login/email':
    post:
      tags:
        - Customer Login
      summary: Login by Email
      description: ''
      operationId: login
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/login_request'
      responses:
        '200':
          $ref: '#/components/schemas/login_response'
        '405':
          description: Invalid input
  '/customer/login/email/check':
    post:
      tags:
        - Customer Login
      summary: Check Email Address
      operationId: emailCheck
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - token
      responses:
        '405':
          description: Invalid input
  '/customer/login/email/signup':
    post:
      tags:
        - Customer Login
      summary: Signup by Email
      operationId: emailSignup
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/login_request'
      responses:
        '200':
          $ref: '#/components/schemas/login_response'
        '405':
          description: Invalid input
  '/customer/login/refresh':
    post:
      tags:
        - Customer Login
      summary: refresh the Customer token
      operationId: refresh token
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                refreshToken:
                  description: refresh key of the customer
                  type: string
                email:
                  description: Customer email
                  type: string
      responses:
        '200':
          $ref: '#/components/schemas/login_response'
        '405':
          description: Invalid input
  '/customer/login/facebook/token':
    post:
      tags:
        - Customer Login
      summary: Login or register using a facebook token
      description: 'Use scope=public_profile,email in the requset'
      operationId: loginFacebookToken
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                token:
                  type: string
              required:
              - token
      responses:
        '200':
          $ref: '#/components/schemas/login_response'
        '405':
          description: Invalid input
  '/customer/login/google/token':
    post:
      tags:
        - Customer Login
      summary: Login or register using a Google token
      description: 'Use scope=profile,email in the requset'
      operationId: loginGoogleToken
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                token:
                  type: string
              required:
              - token
      responses:
        '200':
          $ref: '#/components/schemas/login_response'
        '405':
          description: Invalid input
  
  # -----------------------
  # Customer Actions
  # -----------------------
  '/customer/{id}':
    put:
      tags:
        - Customer Actions
      summary: Updates the Customer data
      description: Updates the Customer data
      parameters:
        - name: id
          in: path
          description: The id of the Customer
          required: true
          schema:
            type: string
      requestBody:
        description: The Customer object with the relevant data to update
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/customer'
      responses:
        default:
          description: successful operation
  '/customer/{id}/profile_pic':
    post:
      tags:
        - Customer Actions
      summary: Updates the Customer profile picture
      description: Updates the Customer profile picture
      parameters:
        - name: id
          in: path
          description: the database id of the Customer
          required: true
          schema:
            type: string
      requestBody:
        description: File structure with base64 property
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/file_base64'
      responses:
        '401':
          $ref: '#/components/responses/Unauthorized'   # <-----
        '404':
          $ref: '#/components/responses/NotFound'       # <-----
  '/customer/{id}/profile_pic_multipart':
    post:
      tags:
        - Customer Actions
      summary: Updates the Customer profile picture
      description: Updates the Customer profile picture
      parameters:
        - name: id
          in: path
          description: the database id of the customer
          required: true
          schema:
            type: string
      responses:
        '401':
          $ref: '#/components/responses/Unauthorized'   # <-----
        '404':
          $ref: '#/components/responses/NotFound'       # <-----
          
  '/customer/{id}/benefit_offer':
    get:
      tags:
        - Customer Actions
      summary: List all the benefits offered to the Customer
      description: List all the benefits offered to the Customer
      parameters:
        - name: id
          in: path
          description: The id of the Customer
          required: true
          schema:
            type: string
        - name: location
          in: query
          description: The current location of the customer
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of benefits offered
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/benefit_customer_offer'
  '/customer/{id}/benefit_offer/buy':
    post:
      tags:
        - Customer Actions
      summary: Create purches request for the benefit
      description: Create purches request for the benefit
                    In the future also buy the benefit offer for Customer
      parameters:
        - name: id
          in: path
          description: The id of the Customer
          required: true
          schema:
            type: string
      requestBody:
        description: Info about the purch
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/buy_benefit_offer_request'
      responses:
        '200':
          description: List of benefits offered
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/benefit_purchase_request'
  '/customer/{id}/benefit_purchased':
    get:
      tags:
        - Customer Actions
      summary: List all the benefits the Customer purchased by status
      description: List all the benefits the Customer purchased by status
      parameters:
        - name: id
          in: path
          description: The id of the Customer
          required: true
          schema:
            type: string
        - name: status
          in: query
          description: the status of the purchased benefit to list
          required: true
          schema:
            $ref: '#/components/schemas/benefit_purchased_status'
      responses:
        '200':
          description: List of benefits offered
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/benefit_purchased'
  '/customer/{id}/benefit_purchased/use':
    post:
      tags:
        - Customer Actions
      summary: Create use request for the purchased benefit
      description: Create use request for the purchased benefit
      parameters:
        - name: id
          in: path
          description: The id of the Customer
          required: true
          schema:
            type: string
      requestBody:
        description: Info about the purch
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/use_benefit_purchase_request'
      responses:
        '200':
          description: List of benefits offered
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/benefit_used_request'
  
  #
  # Customer Messages
  #
  '/customer/{id}/messages/system/new':
    get:
      tags:
        - Customer Messages
      summary: Get customer messages by status
      description: >-
        The customer is already registered in the system, use after the buying
        confirmation
      operationId: getCustomerMessages
      parameters:
        - name: id
          in: path
          description: the database id of the customer
          required: true
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
  '/customer/{id}/messages/system/acknowledge':
    put:
      tags:
        - Customer Messages
      summary: Get customer messages by status
      description: >-
        The customer is already registered in the system, use after the buying
        confirmation
      operationId: getCustomerMessages
      parameters:
        - name: id
          in: path
          description: the database id of the customer
          required: true
          schema:
            type: string
      requestBody:
        description: Info about the purch
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/message_acknowledge'
      responses:
        '405':
          description: Invalid input
  '/customer/{id}/messages/system/answer':
    post:
      tags:
        - Customer Messages
      summary: Get customer messages by status
      description: Answer to cusromer message
      parameters:
        - name: id
          in: path
          description: the database id of the customer
          required: true
          schema:
            type: string
      requestBody:
        description: Info about the purch
        required: true
        content:
          'application/json':
            schema:
              oneOf:
                - $ref: '#/components/schemas/customer_message_answer_yesno'
                - $ref: '#/components/schemas/customer_message_answer_text'
              discriminator:
                propertyName: type
      responses:
        '405':
          description: Invalid input
  
  #
  # Business login
  #
  '/business/login/email':
    post:
      tags:
        - Business Login
      summary: Signup new provider
      description: Create new provider in the system
      operationId: signupProvider
      requestBody:
        description: Info about the provider location
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/login_request'
      responses:
        '200':
          description: successful operation
  #
  # Business Actions
  #
  '/business/{businessId}':
    get:
      tags:
        - Business Actions
      summary: Get all business info
      description: Get all business info
      parameters:
        - name: businessId
          in: path
          description: The id of the provider
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/business'
    put:
      tags:
        - Business Actions
      summary: Update business info
      description: Update business info
      parameters:
        - name: businessId
          in: path
          description: The id of the provider
          required: true
          schema:
            type: string
      requestBody:
        description: Info about the provider location
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/business'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/business'
  '/business/{businessId}/picture':
    post:
      tags:
        - Business Actions
      summary: Update or set provider picture
      description: Update or set provider picture
      operationId: updateBankDetails
      parameters:
        - name: businessId
          in: path
          description: The id of the provider
          required: true
          schema:
            type: string
      requestBody:
        description: File structure with base64 property
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/file_base64'
      responses:
        '200':
          description: successful operation
  '/business/{businessId}/benefit_offer':
    get:
      tags:
        - Business Actions
      summary: Get business benefits offered
      description: Get business benefits offered
      parameters:
        - name: businessId
          in: path
          description: The id of the business
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of benefits offered
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/benefit_offer'
    post:
      tags:
        - Business Actions
      summary: Add new benefit offer to business
      description: Add new benefit to business
      parameters:
        - name: businessId
          in: path
          description: The id of the business
          required: true
          schema:
            type: string
      requestBody:
        description: New nenefit offer
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/benefit_offer'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/benefit_offer'
  '/business/{businessId}/benefit_offer/{benefitId}':
    put:
      tags:
        - Business Actions
      summary: Update the benefit offer of the business
      description: Update the benefit offer of the business
      parameters:
        - name: businessId
          in: path
          description: The id of the business
          required: true
          schema:
            type: string
        - name: benefitId
          in: path
          description: The id of the business offerd bebefit
          required: true
          schema:
            type: string
      requestBody:
        description: Info about the provider location
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/benefit_offer'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/benefit_offer'
    delete:
      tags:
        - Business Actions
      summary: Removes the benefit offer of the business
      description: Removes the benefit offer of the business
      parameters:
        - name: businessId
          in: path
          description: The id of the business
          required: true
          schema:
            type: string
        - name: benefitId
          in: path
          description: The id of the business offerd bebefit
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
  '/business/{businessId}/benefit_used':
    get:
      tags:
        - Business Actions
      summary: Get list of benefits that the business sold
      description: Get list of benefits that the business sold
                    The default is one month back and max of 100 benefits
      parameters:
        - name: businessId
          in: path
          description: The id of the business
          required: true
          schema:
            type: string
        - name: from
          in: query
          description: The starting date to get the list
          required: false
          schema:
            type: string
        - name: to
          in: query
          description: The ending date to get the list
          required: false
          schema:
            type: string
        - name: maxrec
          in: query
          description: The maximum number of record to show, defualt is 100
          required: false
          schema:
            type: number
      responses:
        '200':
          description: List of benefits offered
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/benefit_used'
  
  '/business/{businessId}/benefit_purchase/request':
    get:
      tags:
        - Business Actions
      summary: List all the benefit purchase requsts for the business
      description: List all the benefit purchase requsts for the business
      parameters:
        - name: businessId
          in: path
          description: The id of the business
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of Classification Categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/benefit_purchase_request'
    post:
      tags:
        - Business Actions
      summary: Redeem the benefit by the business
      description: Redeem the benefit by the business
      parameters:
        - name: businessId
          in: path
          description: The id of the business
          required: true
          schema:
            type: string
      requestBody:
        description: Uniqe identification for the benefit purchase requst
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/benefit_purchase_request_redeem'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/benefit_used'
  
  '/business/{businessId}/benefit_use/request':
    get:
      tags:
        - Business Actions
      summary: List all the benefit purchase requsts for the business
      description: List all the benefit purchase requsts for the business
      parameters:
        - name: businessId
          in: path
          description: The id of the business
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of Classification Categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/benefit_used_request'
    post:
      tags:
        - Business Actions
      summary: Redeem the benefit by the business
      description: Redeem the benefit by the business
      parameters:
        - name: businessId
          in: path
          description: The id of the business
          required: true
          schema:
            type: string
      requestBody:
        description: Uniqe identification for the benefit purchase requst
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/benefit_used_request_redeem'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/benefit_used'
# securityDefinitions:
#  petstore_auth:
#    type: oauth2
#    authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
#    flow: implicit
#    scopes:
#      'write:pets': modify pets in your account
#      'read:pets': read your pets
#  api_key:
#    type: apiKey
#    name: api_key
#    in: header 
components:
  responses:
    ByteImage:
      description: Image
      content:
        image/png:
          schema:
            type: string
            format: binary
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    
  schemas:
    login_request:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        
    
    login_response:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        scope:
          type: string
        token_type:
          type: string
        expires_in:
          type: number
        customer_id:
          type: string
        provider_id:
          type: string
  # Business ######################
  
    address:
      type: object
      properties:
        adress1:
          type: string
        address2:
          type: string
        district:
          type: string
        city:
          type: string
        country:
          type: string
        postalCode:
          type: string
        phone:
          type: string
        location:
          $ref: '#/components/schemas/location'
    location:
      type: object
      properties:
        x:
          type: number
          format: dubble
        y:
          type: number
          format: dubble
    
    business:
      type: object
      properties:
        email:
          type: string
        providerName:
          type: string
        address:
          $ref: '#/components/schemas/address'
        information:
          $ref: '#/components/schemas/businessInformation'
          
    businessInformation:
      type: object
      properties:
        contactName:
          type: string
        decription:
          type: string
        picture_url:
          type: string
        
    benefit_type:
      description: Unique code for the request
      type: string
      enum: [type1, type2]
      
    benefit_offer:
      type: object
      properties:
        type:
           $ref: '#/components/schemas/benefit_type'
        name:
          type: string
        value:
          type: string
        description:
          type: string
      required:
        - name
        - type
        - value
        - description
    
    benefit_used:
      type: object
      properties:
        type:
           $ref: '#/components/schemas/benefit_type'
        status:
          type: string
        value:
          type: string
        name:
          type: string
        count_used:
          type: number
        count_total:
          type: number
        description:
          type: string
      required:
        - type
        - status
        - value
        
  
  # Customer ######################
    
    
    customer:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        appLanguage:
          type: string
          enum: [eng, esp]
        score:
          type: integer
          format: int32
        pushNotificationToken:
          type: string
        pushNotificationLevel:
          type: integer
          format: int32
        details:
          $ref: '#/components/schemas/customer_details'
        info:
          $ref: '#/components/schemas/customer_personal_info'
        
    
    customer_details:
      type: object
      properties:
        pushNotificationToken:
          type: string
        pushNotificationLevel:
          type: integer
          format: int32
        appLanguage:
          type: string
          enum: [heb, eng]
          
    customer_personal_info:
      type: object
      properties:
        homeCountry:
          type: string
        String:
          type: string
          enum: [male, female]
        age:
          type: integer
          format: int32
        birthDate:
          type: string
          format: date-time
          
          
    # Like benefit_offer but with business info for display
    benefit_customer_offer:
      type: object
      properties:
        id:
          description: The offered benefit id
          type: string
        type:
          type: string
        name:
          type: string
        businessName:
          type: string
        pictureURL:
          type: string
        value:
          type: number
    
    buy_benefit_offer_request:
      type: object
      properties:
        benefit_offer_Id:
          description: The offered benefit id
          type: string
        requestTime:
          type: string
          format: date-time
        location:
          $ref: '#/components/schemas/location'
      required:
        - offerId
        - requestTime
    
    benefit_purchase_request:
      type: object
      properties:
        businessId:
          description: the ID of the business the benefit belongs to
          type: string
        CustomerId:
          description: the ID of the business the benefit belongs to
          type: string
        code:
          $ref: '#/components/schemas/benefit_purchase_code'
        requestTime:
          description: The time the request was sent
          type: string
          format: date-time
      required:
        - businessId
        - code
        - requestTime
        
    benefit_purchase_code:
      description: Returned by the server for new Customer requests,
                    Send by the business for confirmation
      type: string
    
    benefit_purchase_request_redeem:
      type: object
      properties:
        code:
          $ref: '#/components/schemas/benefit_purchase_code'
        redeemTime:
          type: string
          format: date-time
      required:
      - code
      - redeemTime
        
    
    benefit_purchased_status:
      description: The statuses of purchased benefit
      type: string
      enum: [active,ended]
    
    benefit_purchased:
      type: object
      properties:
        id:
          description: The offered benefit id
          type: string
        type:
          $ref: '#/components/schemas/benefit_type'
        status:
          $ref: '#/components/schemas/benefit_purchased_status'
        code:
          $ref: '#/components/schemas/benefit_purchase_code'
        name:
          type: string
        businessName:
          type: string
        pictureURL:
          type: string
        value:
          type: number
    
    use_benefit_purchase_request:
      type: object
      description: Only the Customer sending this object
      properties:
        benefitId:
          description: The purchased benefit id
          type: string
        points:
          description: Requerd only for points type
          type: number
        # Only returned can not set by the Customer
        code:
          $ref: '#/components/schemas/benefit_purchase_code'
        requestTime:
          type: string
          format: date-time
        location:
          $ref: '#/components/schemas/location'
      required:
        - benefitId
        - requestTime
    
    benefit_used_request:
      type: object
      description: The Customer gets this object, And the business can query it
      properties:
        benefitId:
          description: The purchased benefit id
          type: string
        businessId:
          description: the ID of the business the benefit belongs to
          type: string
        CustomerId:
          description: the ID of the business the benefit belongs to
          type: string
        points:
          description: Requerd only for points type
          type: number
        # Only returned can not set by the Customer
        code:
          $ref: '#/components/schemas/benefit_purchase_code'
        requestTime:
          type: string
          format: date-time
        location:
          $ref: '#/components/schemas/location'
    
    benefit_used_request_redeem:
      type: object
      description: Only the business sending this object
      properties:
        code:
          $ref: '#/components/schemas/benefit_purchase_code'
        redeemTime:
          type: string
          format: date-time
      required:
      - code
      - redeemTime
    
## Messages #####################

    message_acknowledge:
      type: object
      properties:
        time:
          type: string
        messages_ids:
          description: list of message ids
          type: array
          items:
            type: string
          example: [5a1f34f38de25598b44311a1, 5a1f354e8de25598b44311a3, 5a1f35578de25598b44311a4]
        
        
    # All message types
    customer_message:
      type: object
      properties:
        id:
          description: message id
          type: string
        status:
          description: type of answer relate to the type of message
          type: string
        customerID:
          description: the Customer id of the message
          type: string
        type:
          description: the Customer id of the message
          type: string
          enum: [eng, esp]
        showSuspension:
          description: time to delay the message
          type: number
    
    
    # All answer types
    customer_message_answer_yesno:
      type: object
      required:
        - type
        - messageID
      properties:
        messageID:
          description: message id
          type: string
        type:
          description: yesno
          type: string
        text:
          description: type of answer relate to the type of message
          type: string
    customer_message_answer_text:
      type: object
      required:
        - type
        - messageID
      properties:
        messageID:
          description: message id
          type: string
        type:
          description: text
          type: string
        text:
          description: type of answer relate to the type of message
          type: string
    
    error:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    file_base64:
      type: object
      properties:
        base64:
          description: File representation in base64
          type: string
        hight:
          type: integer
          format: int64
        width:
          type: integer
          format: int64
        name:
          type: string
